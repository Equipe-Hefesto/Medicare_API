// <auto-generated />
using System;
using Medicare_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Medicare_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250328232729_AtualizacaoSenhaAgoraVai")]
    partial class AtualizacaoSenhaAgoraVai
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Medicare_API.Models.Alarme", b =>
                {
                    b.Property<int>("IdAlarme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAlarme"));

                    b.Property<DateTime>("DtHoraAlarme")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPosologia")
                        .HasColumnType("int");

                    b.Property<int>("IdRemedio")
                        .HasColumnType("int");

                    b.Property<int?>("PosologiaIdPosologia")
                        .HasColumnType("int");

                    b.Property<int?>("RemedioIdRemedio")
                        .HasColumnType("int");

                    b.Property<string>("StAlarme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdAlarme");

                    b.HasIndex("IdPosologia");

                    b.HasIndex("IdRemedio");

                    b.HasIndex("PosologiaIdPosologia");

                    b.HasIndex("RemedioIdRemedio");

                    b.ToTable("Alarmes", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Cuidador", b =>
                {
                    b.Property<int>("IdCuidador")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<DateTime>("DcCuidador")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DtFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DtInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DuCuidador")
                        .HasColumnType("datetime2");

                    b.Property<string>("StCuidador")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("UtilizadorIdUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdCuidador", "IdUtilizador");

                    b.HasIndex("IdUtilizador");

                    b.HasIndex("UtilizadorIdUtilizador");

                    b.ToTable("Cuidadores", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.FormaPagamento", b =>
                {
                    b.Property<int>("IdFormaPagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFormaPagamento"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("QtdMinimaParcelas")
                        .HasColumnType("int");

                    b.Property<int>("QtdParcelas")
                        .HasColumnType("int");

                    b.HasKey("IdFormaPagamento");

                    b.ToTable("FormasPagamento", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.GrauParentesco", b =>
                {
                    b.Property<int>("IdGrauParentesco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGrauParentesco"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("IdGrauParentesco");

                    b.ToTable("GrausParentesco", (string)null);

                    b.HasData(
                        new
                        {
                            IdGrauParentesco = 1,
                            Descricao = "Pai"
                        },
                        new
                        {
                            IdGrauParentesco = 2,
                            Descricao = "Mãe"
                        },
                        new
                        {
                            IdGrauParentesco = 3,
                            Descricao = "Filho"
                        },
                        new
                        {
                            IdGrauParentesco = 4,
                            Descricao = "Filha"
                        },
                        new
                        {
                            IdGrauParentesco = 5,
                            Descricao = "Avô"
                        },
                        new
                        {
                            IdGrauParentesco = 6,
                            Descricao = "Avó"
                        },
                        new
                        {
                            IdGrauParentesco = 7,
                            Descricao = "Tio"
                        },
                        new
                        {
                            IdGrauParentesco = 8,
                            Descricao = "Tia"
                        },
                        new
                        {
                            IdGrauParentesco = 9,
                            Descricao = "Primo"
                        },
                        new
                        {
                            IdGrauParentesco = 10,
                            Descricao = "Prima"
                        },
                        new
                        {
                            IdGrauParentesco = 11,
                            Descricao = "Sobrinho"
                        },
                        new
                        {
                            IdGrauParentesco = 12,
                            Descricao = "Sobrinha"
                        },
                        new
                        {
                            IdGrauParentesco = 13,
                            Descricao = "Cônjuge"
                        },
                        new
                        {
                            IdGrauParentesco = 14,
                            Descricao = "Companheiro"
                        },
                        new
                        {
                            IdGrauParentesco = 15,
                            Descricao = "Companheira"
                        });
                });

            modelBuilder.Entity("Medicare_API.Models.HistoricoPosologia", b =>
                {
                    b.Property<int>("IdPosologia")
                        .HasColumnType("int");

                    b.Property<int>("IdRemedio")
                        .HasColumnType("int");

                    b.Property<int?>("PosologiaIdPosologia")
                        .HasColumnType("int");

                    b.Property<int?>("RemedioIdRemedio")
                        .HasColumnType("int");

                    b.Property<int>("SdPosologia")
                        .HasColumnType("int");

                    b.HasKey("IdPosologia", "IdRemedio");

                    b.HasIndex("IdRemedio");

                    b.HasIndex("PosologiaIdPosologia");

                    b.HasIndex("RemedioIdRemedio");

                    b.ToTable("HistoricosPosologia", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Laboratorio", b =>
                {
                    b.Property<int>("IdLaboratorio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLaboratorio"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdLaboratorio");

                    b.ToTable("Laboratorios", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Parceiro", b =>
                {
                    b.Property<int>("IdParceiro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdParceiro"));

                    b.Property<string>("ApelidoParceiro")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CNPJParceiro")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("NomeParceiro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdParceiro");

                    b.HasIndex("CNPJParceiro")
                        .IsUnique();

                    b.ToTable("Parceiros", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.ParceiroUtilizador", b =>
                {
                    b.Property<int>("IdParceiro")
                        .HasColumnType("int");

                    b.Property<int>("IdColaborador")
                        .HasColumnType("int");

                    b.Property<int?>("ParceiroIdParceiro")
                        .HasColumnType("int");

                    b.Property<int?>("UtilizadorIdUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdParceiro", "IdColaborador");

                    b.HasIndex("IdColaborador");

                    b.HasIndex("ParceiroIdParceiro");

                    b.HasIndex("UtilizadorIdUtilizador");

                    b.ToTable("ParceirosUtilizadores", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Posologia", b =>
                {
                    b.Property<int>("IdPosologia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPosologia"));

                    b.Property<DateTime?>("DtFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DtInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRemedio")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<int>("Intervalo")
                        .HasColumnType("int");

                    b.Property<int>("QtdRemedio")
                        .HasColumnType("int");

                    b.Property<int?>("RemedioIdRemedio")
                        .HasColumnType("int");

                    b.Property<int?>("UtilizadorIdUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdPosologia");

                    b.HasIndex("IdRemedio");

                    b.HasIndex("IdUtilizador");

                    b.HasIndex("RemedioIdRemedio");

                    b.HasIndex("UtilizadorIdUtilizador");

                    b.ToTable("Posologias", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Promocao", b =>
                {
                    b.Property<int>("IdPromocao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPromocao"));

                    b.Property<int?>("ColaboradorIdUtilizador")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("DtFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DtInicio")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FormaPagamentoIdFormaPagamento")
                        .HasColumnType("int");

                    b.Property<int>("IdColaborador")
                        .HasColumnType("int");

                    b.Property<int>("IdFormaPagamento")
                        .HasColumnType("int");

                    b.Property<int>("IdRemedio")
                        .HasColumnType("int");

                    b.Property<int?>("RemedioIdRemedio")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.HasKey("IdPromocao");

                    b.HasIndex("ColaboradorIdUtilizador");

                    b.HasIndex("FormaPagamentoIdFormaPagamento");

                    b.HasIndex("RemedioIdRemedio");

                    b.ToTable("Promocoes", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Remedio", b =>
                {
                    b.Property<int>("IdRemedio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRemedio"));

                    b.Property<string>("Anotacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dosagem")
                        .HasColumnType("int");

                    b.Property<DateTime>("DtRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLaboratorio")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoOrdemGrandeza")
                        .HasColumnType("int");

                    b.Property<int?>("LaboratorioIdLaboratorio")
                        .HasColumnType("int");

                    b.Property<string>("NomeRemedio")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("QtdAlerta")
                        .HasColumnType("float");

                    b.Property<int?>("TipoOrdemGrandezaIdTipoOrdemGrandeza")
                        .HasColumnType("int");

                    b.HasKey("IdRemedio");

                    b.HasIndex("IdLaboratorio");

                    b.HasIndex("IdTipoOrdemGrandeza");

                    b.HasIndex("LaboratorioIdLaboratorio");

                    b.HasIndex("TipoOrdemGrandezaIdTipoOrdemGrandeza");

                    b.ToTable("Remedios", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Responsavel", b =>
                {
                    b.Property<int>("IdResponsavel")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<DateTime>("DcResponsavel")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DuResponsavel")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdGrauParentesco")
                        .HasColumnType("int");

                    b.Property<string>("StResponsavel")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("UtilizadorIdUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdResponsavel", "IdUtilizador");

                    b.HasIndex("IdGrauParentesco");

                    b.HasIndex("IdUtilizador");

                    b.HasIndex("UtilizadorIdUtilizador");

                    b.ToTable("Responsaveis", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.TipoOrdemGrandeza", b =>
                {
                    b.Property<int>("IdTipoOrdemGrandeza")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoOrdemGrandeza"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Simbolos")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("IdTipoOrdemGrandeza");

                    b.ToTable("TiposOrdemGrandeza", (string)null);

                    b.HasData(
                        new
                        {
                            IdTipoOrdemGrandeza = 1,
                            Descricao = "Miligrama",
                            Simbolos = "mg"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 2,
                            Descricao = "Gramas",
                            Simbolos = "g"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 3,
                            Descricao = "Litros",
                            Simbolos = "L"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 4,
                            Descricao = "Mililitros",
                            Simbolos = "mL"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 5,
                            Descricao = "Centímetros cúbicos",
                            Simbolos = "cm³"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 6,
                            Descricao = "Unidades internacionais",
                            Simbolos = "UI"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 7,
                            Descricao = "Micrograma",
                            Simbolos = "mcg"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 8,
                            Descricao = "Quilograma",
                            Simbolos = "kg"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 9,
                            Descricao = "Unidade",
                            Simbolos = "un"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 10,
                            Descricao = "Pipeta",
                            Simbolos = "gota"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 11,
                            Descricao = "Tabletes",
                            Simbolos = "un"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 12,
                            Descricao = "Doses",
                            Simbolos = "Dose"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 13,
                            Descricao = "Miliunidade",
                            Simbolos = "mUI"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 14,
                            Descricao = "Cápsulas",
                            Simbolos = "un"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 15,
                            Descricao = "Soluções",
                            Simbolos = "Sol."
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 16,
                            Descricao = "Gotas",
                            Simbolos = "gota"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 17,
                            Descricao = "Miliquilos",
                            Simbolos = "mL"
                        },
                        new
                        {
                            IdTipoOrdemGrandeza = 18,
                            Descricao = "Injeções",
                            Simbolos = "un"
                        });
                });

            modelBuilder.Entity("Medicare_API.Models.TipoUtilizador", b =>
                {
                    b.Property<int>("IdTipoUtilizador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoUtilizador"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("IdTipoUtilizador");

                    b.ToTable("TiposUtilizador", (string)null);

                    b.HasData(
                        new
                        {
                            IdTipoUtilizador = 1,
                            Descricao = "Utilizador"
                        },
                        new
                        {
                            IdTipoUtilizador = 2,
                            Descricao = "Cuidador"
                        },
                        new
                        {
                            IdTipoUtilizador = 3,
                            Descricao = "Responsável"
                        },
                        new
                        {
                            IdTipoUtilizador = 4,
                            Descricao = "Parceiro"
                        });
                });

            modelBuilder.Entity("Medicare_API.Models.Utilizador", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUtilizador"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("DtNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdTipoUtilizador")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("SenhaSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("IdUtilizador");

                    b.HasIndex("IdTipoUtilizador");

                    b.HasIndex("CPF", "IdTipoUtilizador")
                        .IsUnique();

                    b.ToTable("Utilizadores", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Alarme", b =>
                {
                    b.HasOne("Medicare_API.Models.Posologia", "Posologia")
                        .WithMany()
                        .HasForeignKey("IdPosologia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Remedio", "Remedio")
                        .WithMany()
                        .HasForeignKey("IdRemedio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Posologia", null)
                        .WithMany("Alarmes")
                        .HasForeignKey("PosologiaIdPosologia");

                    b.HasOne("Medicare_API.Models.Remedio", null)
                        .WithMany("Alarmes")
                        .HasForeignKey("RemedioIdRemedio");

                    b.Navigation("Posologia");

                    b.Navigation("Remedio");
                });

            modelBuilder.Entity("Medicare_API.Models.Cuidador", b =>
                {
                    b.HasOne("Medicare_API.Models.Utilizador", "CuidadorUtilizador")
                        .WithMany()
                        .HasForeignKey("IdCuidador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", null)
                        .WithMany("Cuidadores")
                        .HasForeignKey("UtilizadorIdUtilizador");

                    b.Navigation("CuidadorUtilizador");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Medicare_API.Models.HistoricoPosologia", b =>
                {
                    b.HasOne("Medicare_API.Models.Posologia", "Posologia")
                        .WithMany()
                        .HasForeignKey("IdPosologia")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Remedio", "Remedio")
                        .WithMany()
                        .HasForeignKey("IdRemedio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Posologia", null)
                        .WithMany("HistoricosPosologia")
                        .HasForeignKey("PosologiaIdPosologia");

                    b.HasOne("Medicare_API.Models.Remedio", null)
                        .WithMany("HistoricosPosologia")
                        .HasForeignKey("RemedioIdRemedio");

                    b.Navigation("Posologia");

                    b.Navigation("Remedio");
                });

            modelBuilder.Entity("Medicare_API.Models.ParceiroUtilizador", b =>
                {
                    b.HasOne("Medicare_API.Models.Utilizador", "Colaborador")
                        .WithMany()
                        .HasForeignKey("IdColaborador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Parceiro", "Parceiro")
                        .WithMany()
                        .HasForeignKey("IdParceiro")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Parceiro", null)
                        .WithMany("ParceiroUtilizador")
                        .HasForeignKey("ParceiroIdParceiro");

                    b.HasOne("Medicare_API.Models.Utilizador", null)
                        .WithMany("ParceiroUtilizadores")
                        .HasForeignKey("UtilizadorIdUtilizador");

                    b.Navigation("Colaborador");

                    b.Navigation("Parceiro");
                });

            modelBuilder.Entity("Medicare_API.Models.Posologia", b =>
                {
                    b.HasOne("Medicare_API.Models.Remedio", "Remedio")
                        .WithMany()
                        .HasForeignKey("IdRemedio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Remedio", null)
                        .WithMany("Posologias")
                        .HasForeignKey("RemedioIdRemedio");

                    b.HasOne("Medicare_API.Models.Utilizador", null)
                        .WithMany("Posologias")
                        .HasForeignKey("UtilizadorIdUtilizador");

                    b.Navigation("Remedio");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Medicare_API.Models.Promocao", b =>
                {
                    b.HasOne("Medicare_API.Models.Utilizador", "Colaborador")
                        .WithMany("Promocoes")
                        .HasForeignKey("ColaboradorIdUtilizador");

                    b.HasOne("Medicare_API.Models.FormaPagamento", "FormaPagamento")
                        .WithMany("Promocoes")
                        .HasForeignKey("FormaPagamentoIdFormaPagamento");

                    b.HasOne("Medicare_API.Models.Remedio", "Remedio")
                        .WithMany("Promocoes")
                        .HasForeignKey("RemedioIdRemedio");

                    b.Navigation("Colaborador");

                    b.Navigation("FormaPagamento");

                    b.Navigation("Remedio");
                });

            modelBuilder.Entity("Medicare_API.Models.Remedio", b =>
                {
                    b.HasOne("Medicare_API.Models.Laboratorio", "Laboratorio")
                        .WithMany()
                        .HasForeignKey("IdLaboratorio")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.TipoOrdemGrandeza", "TipoOrdemGrandeza")
                        .WithMany()
                        .HasForeignKey("IdTipoOrdemGrandeza")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Laboratorio", null)
                        .WithMany("Remedios")
                        .HasForeignKey("LaboratorioIdLaboratorio");

                    b.HasOne("Medicare_API.Models.TipoOrdemGrandeza", null)
                        .WithMany("Remedios")
                        .HasForeignKey("TipoOrdemGrandezaIdTipoOrdemGrandeza");

                    b.Navigation("Laboratorio");

                    b.Navigation("TipoOrdemGrandeza");
                });

            modelBuilder.Entity("Medicare_API.Models.Responsavel", b =>
                {
                    b.HasOne("Medicare_API.Models.GrauParentesco", "GrauParentesco")
                        .WithMany("Responsavel")
                        .HasForeignKey("IdGrauParentesco")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", "ResponsavelUtilizador")
                        .WithMany()
                        .HasForeignKey("IdResponsavel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", null)
                        .WithMany("Responsaveis")
                        .HasForeignKey("UtilizadorIdUtilizador");

                    b.Navigation("GrauParentesco");

                    b.Navigation("ResponsavelUtilizador");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Medicare_API.Models.Utilizador", b =>
                {
                    b.HasOne("Medicare_API.Models.TipoUtilizador", "TipoUtilizador")
                        .WithMany("Utilizadores")
                        .HasForeignKey("IdTipoUtilizador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TipoUtilizador");
                });

            modelBuilder.Entity("Medicare_API.Models.FormaPagamento", b =>
                {
                    b.Navigation("Promocoes");
                });

            modelBuilder.Entity("Medicare_API.Models.GrauParentesco", b =>
                {
                    b.Navigation("Responsavel");
                });

            modelBuilder.Entity("Medicare_API.Models.Laboratorio", b =>
                {
                    b.Navigation("Remedios");
                });

            modelBuilder.Entity("Medicare_API.Models.Parceiro", b =>
                {
                    b.Navigation("ParceiroUtilizador");
                });

            modelBuilder.Entity("Medicare_API.Models.Posologia", b =>
                {
                    b.Navigation("Alarmes");

                    b.Navigation("HistoricosPosologia");
                });

            modelBuilder.Entity("Medicare_API.Models.Remedio", b =>
                {
                    b.Navigation("Alarmes");

                    b.Navigation("HistoricosPosologia");

                    b.Navigation("Posologias");

                    b.Navigation("Promocoes");
                });

            modelBuilder.Entity("Medicare_API.Models.TipoOrdemGrandeza", b =>
                {
                    b.Navigation("Remedios");
                });

            modelBuilder.Entity("Medicare_API.Models.TipoUtilizador", b =>
                {
                    b.Navigation("Utilizadores");
                });

            modelBuilder.Entity("Medicare_API.Models.Utilizador", b =>
                {
                    b.Navigation("Cuidadores");

                    b.Navigation("ParceiroUtilizadores");

                    b.Navigation("Posologias");

                    b.Navigation("Promocoes");

                    b.Navigation("Responsaveis");
                });
#pragma warning restore 612, 618
        }
    }
}
