// <auto-generated />
using System;
using Medicare_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Medicare_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250602155422_ArrumandoRelacionamentodaSolicitacao2")]
    partial class ArrumandoRelacionamentodaSolicitacao2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Medicare_API.Models.Alarme", b =>
                {
                    b.Property<int>("IdAlarme")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2")
                        .HasColumnName("dtHoraAlarme");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("dsAlarme");

                    b.Property<int>("IdPosologia")
                        .HasColumnType("int");

                    b.Property<int?>("PosologiaIdPosologia")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("stAlarme");

                    b.HasKey("IdAlarme");

                    b.HasIndex("IdPosologia");

                    b.HasIndex("PosologiaIdPosologia");

                    b.ToTable("Alarmes", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Cuidador", b =>
                {
                    b.Property<int>("IdCuidador")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("duCuidado");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("dcCuidado");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2")
                        .HasColumnName("dtFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("dtInicio");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("stCuidado");

                    b.Property<int?>("UtilizadorIdUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdCuidador", "IdPaciente");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("UtilizadorIdUtilizador");

                    b.ToTable("Cuidadores", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.FormaPagamento", b =>
                {
                    b.Property<int>("IdFormaPagamento")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("dsFormaPagamento");

                    b.Property<int>("QtdeMaxParcelas")
                        .HasColumnType("int")
                        .HasColumnName("qtdeMaxParcelas");

                    b.Property<int>("QtdeMinParcelas")
                        .HasColumnType("int")
                        .HasColumnName("qtdeMinParcelas");

                    b.Property<int>("QtdeParcelas")
                        .HasColumnType("int")
                        .HasColumnName("qtdeParcelas");

                    b.HasKey("IdFormaPagamento");

                    b.ToTable("FormasPagamento", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Horario", b =>
                {
                    b.Property<int>("IdPosologia")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("Hora")
                        .HasColumnType("time")
                        .HasColumnName("horario");

                    b.HasKey("IdPosologia", "Hora");

                    b.ToTable("Horarios", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Parceiro", b =>
                {
                    b.Property<int>("IdParceiro")
                        .HasColumnType("int");

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("apParceiro");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)")
                        .HasColumnName("cnpjParceiro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nmParceiro");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("stParceiro");

                    b.HasKey("IdParceiro");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.ToTable("Parceiros", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.ParceiroUtilizador", b =>
                {
                    b.Property<int>("IdParceiro")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<int?>("UtilizadorIdUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdParceiro", "IdUtilizador");

                    b.HasIndex("IdUtilizador");

                    b.HasIndex("UtilizadorIdUtilizador");

                    b.ToTable("Parceiros_Utilizadores", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Posologia", b =>
                {
                    b.Property<int>("IdPosologia")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2")
                        .HasColumnName("dfPosologia");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("diPosologia");

                    b.Property<int>("DiasPausa")
                        .HasColumnType("int")
                        .HasColumnName("diasPausa");

                    b.PrimitiveCollection<string>("DiasSemana")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("diasSemana");

                    b.Property<int>("DiasUso")
                        .HasColumnType("int")
                        .HasColumnName("diasUso");

                    b.Property<int>("IdRemedio")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoAgendamento")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoFarmaceutico")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoGrandeza")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<string>("Intervalo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("intervalo");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("qtdePosologia");

                    b.Property<int>("QuantidadeDose")
                        .HasColumnType("int")
                        .HasColumnName("qtdeDose");

                    b.Property<int?>("UtilizadorIdUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdPosologia");

                    b.HasIndex("IdRemedio");

                    b.HasIndex("IdTipoAgendamento");

                    b.HasIndex("IdTipoFarmaceutico");

                    b.HasIndex("IdTipoGrandeza");

                    b.HasIndex("IdUtilizador");

                    b.HasIndex("UtilizadorIdUtilizador");

                    b.ToTable("Posologias", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Promocao", b =>
                {
                    b.Property<int>("IdPromocao")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2")
                        .HasColumnName("dtFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("dtInicio");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dsPromocao");

                    b.Property<int>("IdFormaPagamento")
                        .HasColumnType("int");

                    b.Property<int>("IdRemedio")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<int?>("RemedioIdRemedio")
                        .HasColumnType("int");

                    b.Property<int?>("UtilizadorIdUtilizador")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vlrPromocao");

                    b.HasKey("IdPromocao");

                    b.HasIndex("IdFormaPagamento");

                    b.HasIndex("IdRemedio");

                    b.HasIndex("IdUtilizador");

                    b.HasIndex("RemedioIdRemedio");

                    b.HasIndex("UtilizadorIdUtilizador");

                    b.ToTable("Promocoes", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Remedio", b =>
                {
                    b.Property<int>("IdRemedio")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("duRemedio");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("dcRemedio");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("nmRemedio");

                    b.HasKey("IdRemedio");

                    b.ToTable("Remedios", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Responsavel", b =>
                {
                    b.Property<int>("IdResponsavel")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("duResponsabilidade");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2")
                        .HasColumnName("dcResponsabilidade");

                    b.Property<int>("IdTipoParentesco")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("stResponsabilidade");

                    b.Property<int?>("UtilizadorIdUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdResponsavel", "IdPaciente");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdTipoParentesco");

                    b.HasIndex("UtilizadorIdUtilizador");

                    b.ToTable("Responsaveis", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.SolicitacoesVinculo", b =>
                {
                    b.Property<int>("IdSolicitacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSolicitacao"));

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdReceptor")
                        .HasColumnType("int");

                    b.Property<int>("IdSolicitante")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoReceptor")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoSolicitante")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSolicitacao");

                    b.HasIndex("IdReceptor", "IdTipoReceptor");

                    b.HasIndex("IdSolicitante", "IdTipoSolicitante");

                    b.ToTable("SolicitacoesVinculos", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.TipoAgendamento", b =>
                {
                    b.Property<int>("IdTipoAgendamento")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("IdTipoAgendamento");

                    b.ToTable("TiposAgendamento", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.TipoFarmaceutico", b =>
                {
                    b.Property<int>("IdTipoFarmaceutico")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("decricao");

                    b.HasKey("IdTipoFarmaceutico");

                    b.ToTable("TiposFarmaceutico", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.TipoGrandeza", b =>
                {
                    b.Property<int>("IdTipoGrandeza")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("dsGrandeza");

                    b.HasKey("IdTipoGrandeza");

                    b.ToTable("TiposGrandeza", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.TipoParentesco", b =>
                {
                    b.Property<int>("IdTipoParentesco")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("dsParentesco");

                    b.HasKey("IdTipoParentesco");

                    b.ToTable("TiposParentesco", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.TipoUtilizador", b =>
                {
                    b.Property<int>("IdTipoUtilizador")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("dsTipoUtilizador");

                    b.HasKey("IdTipoUtilizador");

                    b.ToTable("TiposUtilizadores", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Utilizador", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .HasColumnName("cpfUtilizador")
                        .IsFixedLength();

                    b.Property<DateTime>("DtNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("emUtilizador");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("nmUtilizador");

                    b.Property<byte[]>("SenhaHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)")
                        .HasColumnName("senhaHash");

                    b.Property<byte[]>("SenhaSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varbinary(128)")
                        .HasColumnName("senhaSalt");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("sbUtilizador");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .HasColumnName("telUtilizador")
                        .IsFixedLength();

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("userUtilizador");

                    b.HasKey("IdUtilizador");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Utilizadores", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.UtilizadorTipoUtilizador", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdUtilizador", "IdTipoUtilizador");

                    b.HasIndex("IdTipoUtilizador");

                    b.ToTable("Utilizadores_TiposUtilizadores", (string)null);
                });

            modelBuilder.Entity("Medicare_API.Models.Alarme", b =>
                {
                    b.HasOne("Medicare_API.Models.Posologia", "Posologia")
                        .WithMany()
                        .HasForeignKey("IdPosologia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Posologia", null)
                        .WithMany("Alarmes")
                        .HasForeignKey("PosologiaIdPosologia");

                    b.Navigation("Posologia");
                });

            modelBuilder.Entity("Medicare_API.Models.Cuidador", b =>
                {
                    b.HasOne("Medicare_API.Models.Utilizador", "CuidadorUser")
                        .WithMany()
                        .HasForeignKey("IdCuidador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", "Paciente")
                        .WithMany()
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", null)
                        .WithMany("Cuidadores")
                        .HasForeignKey("UtilizadorIdUtilizador");

                    b.Navigation("CuidadorUser");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Medicare_API.Models.Horario", b =>
                {
                    b.HasOne("Medicare_API.Models.Posologia", "Posologia")
                        .WithMany("Horarios")
                        .HasForeignKey("IdPosologia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posologia");
                });

            modelBuilder.Entity("Medicare_API.Models.ParceiroUtilizador", b =>
                {
                    b.HasOne("Medicare_API.Models.Parceiro", "Parceiro")
                        .WithMany("ParceirosUtilizadores")
                        .HasForeignKey("IdParceiro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", null)
                        .WithMany("ParceirosUtilizadores")
                        .HasForeignKey("UtilizadorIdUtilizador");

                    b.Navigation("Parceiro");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Medicare_API.Models.Posologia", b =>
                {
                    b.HasOne("Medicare_API.Models.Remedio", "Remedio")
                        .WithMany()
                        .HasForeignKey("IdRemedio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.TipoAgendamento", "TipoAgendamento")
                        .WithMany()
                        .HasForeignKey("IdTipoAgendamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.TipoFarmaceutico", "TipoFarmaceutico")
                        .WithMany()
                        .HasForeignKey("IdTipoFarmaceutico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.TipoGrandeza", "TipoGrandeza")
                        .WithMany()
                        .HasForeignKey("IdTipoGrandeza")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", null)
                        .WithMany("Posologias")
                        .HasForeignKey("UtilizadorIdUtilizador");

                    b.Navigation("Remedio");

                    b.Navigation("TipoAgendamento");

                    b.Navigation("TipoFarmaceutico");

                    b.Navigation("TipoGrandeza");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Medicare_API.Models.Promocao", b =>
                {
                    b.HasOne("Medicare_API.Models.FormaPagamento", "FormaPagamento")
                        .WithMany()
                        .HasForeignKey("IdFormaPagamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Remedio", "Remedio")
                        .WithMany()
                        .HasForeignKey("IdRemedio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", "Utilizador")
                        .WithMany()
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Remedio", null)
                        .WithMany("Promocoes")
                        .HasForeignKey("RemedioIdRemedio");

                    b.HasOne("Medicare_API.Models.Utilizador", null)
                        .WithMany("Promocoes")
                        .HasForeignKey("UtilizadorIdUtilizador");

                    b.Navigation("FormaPagamento");

                    b.Navigation("Remedio");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Medicare_API.Models.Responsavel", b =>
                {
                    b.HasOne("Medicare_API.Models.Utilizador", "Paciente")
                        .WithMany()
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", "ResponsavelUser")
                        .WithMany()
                        .HasForeignKey("IdResponsavel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.TipoParentesco", "TipoParentesco")
                        .WithMany()
                        .HasForeignKey("IdTipoParentesco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", null)
                        .WithMany("Responsaveis")
                        .HasForeignKey("UtilizadorIdUtilizador");

                    b.Navigation("Paciente");

                    b.Navigation("ResponsavelUser");

                    b.Navigation("TipoParentesco");
                });

            modelBuilder.Entity("Medicare_API.Models.SolicitacoesVinculo", b =>
                {
                    b.HasOne("Medicare_API.Models.Utilizador", "Receptor")
                        .WithMany()
                        .HasForeignKey("IdReceptor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", "Solicitante")
                        .WithMany()
                        .HasForeignKey("IdSolicitante")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.UtilizadorTipoUtilizador", "TipoReceptor")
                        .WithMany()
                        .HasForeignKey("IdReceptor", "IdTipoReceptor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.UtilizadorTipoUtilizador", "TipoSolicitante")
                        .WithMany()
                        .HasForeignKey("IdSolicitante", "IdTipoSolicitante")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receptor");

                    b.Navigation("Solicitante");

                    b.Navigation("TipoReceptor");

                    b.Navigation("TipoSolicitante");
                });

            modelBuilder.Entity("Medicare_API.Models.UtilizadorTipoUtilizador", b =>
                {
                    b.HasOne("Medicare_API.Models.TipoUtilizador", "TipoUtilizador")
                        .WithMany("Utilizadores")
                        .HasForeignKey("IdTipoUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Medicare_API.Models.Utilizador", "Utilizador")
                        .WithMany("TiposUtilizadores")
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoUtilizador");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("Medicare_API.Models.Parceiro", b =>
                {
                    b.Navigation("ParceirosUtilizadores");
                });

            modelBuilder.Entity("Medicare_API.Models.Posologia", b =>
                {
                    b.Navigation("Alarmes");

                    b.Navigation("Horarios");
                });

            modelBuilder.Entity("Medicare_API.Models.Remedio", b =>
                {
                    b.Navigation("Promocoes");
                });

            modelBuilder.Entity("Medicare_API.Models.TipoUtilizador", b =>
                {
                    b.Navigation("Utilizadores");
                });

            modelBuilder.Entity("Medicare_API.Models.Utilizador", b =>
                {
                    b.Navigation("Cuidadores");

                    b.Navigation("ParceirosUtilizadores");

                    b.Navigation("Posologias");

                    b.Navigation("Promocoes");

                    b.Navigation("Responsaveis");

                    b.Navigation("TiposUtilizadores");
                });
#pragma warning restore 612, 618
        }
    }
}
